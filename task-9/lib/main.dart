

import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'firebase_options.dart'; // This file is generated by the FlutterFire CLI


// 1. Initialize Firebase before running the app.
void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );
  runApp(const MyApp());
}


// 2. Data Model for our posts.
class Post {
  final String? id;
  final String title;
  final String message;
  final DateTime timestamp;


  Post({
    this.id,
    required this.title,
    required this.message,
    DateTime? timestamp,
  }) : timestamp = timestamp ?? DateTime.now();


  // A factory constructor to create a Post from a Firestore document.
  factory Post.fromFirestore(DocumentSnapshot doc) {
    Map data = doc.data() as Map<String, dynamic>;
    return Post(
      id: doc.id,
      title: data['title'] ?? '',
      message: data['message'] ?? '',
      timestamp: (data['timestamp'] as Timestamp).toDate(),
    );
  }
}


// 3. Main Application Widget
class MyApp extends StatelessWidget {
  const MyApp({super.key});


  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'Firebase Firestore Lab',
      theme: ThemeData(primarySwatch: Colors.indigo, useMaterial3: true),
      home: const FirestoreScreen(),
    );
  }
}


// 4. Main Screen with Firestore Integration
class FirestoreScreen extends StatefulWidget {
  const FirestoreScreen({super.key});


  @override
  State<FirestoreScreen> createState() => _FirestoreScreenState();
}


class _FirestoreScreenState extends State<FirestoreScreen> {
  final _titleController = TextEditingController();
  final _messageController = TextEditingController();
  final CollectionReference _postsCollection = FirebaseFirestore.instance.collection('posts');

  @override
  void dispose() {
    _titleController.dispose();
    _messageController.dispose();
    super.dispose();
  }


  // Method to add a new post to Firestore.
  Future<void> _addPost() async {
    if (_titleController.text.isEmpty || _messageController.text.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Please fill in both title and message')),
      );
      return;
    }

    try {
      await _postsCollection.add({
        'title': _titleController.text,
        'message': _messageController.text,
        'timestamp': FieldValue.serverTimestamp(), // Use server time for consistency
      });
      _titleController.clear();
      _messageController.clear();
      FocusScope.of(context).unfocus();
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Post added successfully')),
      );
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error adding post: $e')),
      );
    }
  }

  Future<void> _deletePost(String postId) async {
    try {
      await _postsCollection.doc(postId).delete();
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Post deleted successfully')),
      );
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error deleting post: $e')),
      );
    }
  }


  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Firestore Posts')),
      body: Column(
        children: [
          _buildInputArea(),
          const Divider(height: 1),
          _buildPostsList(),
        ],
      ),
    );
  }


  // UI for the input fields and button.
  Widget _buildInputArea() {
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Column(
        children: [
          TextField(
            controller: _titleController,
            decoration: const InputDecoration(labelText: 'Title', border: OutlineInputBorder()),
          ),
          const SizedBox(height: 10),
          TextField(
            controller: _messageController,
            decoration: const InputDecoration(labelText: 'Message', border: OutlineInputBorder()),
          ),
          const SizedBox(height: 10),
          ElevatedButton(onPressed: _addPost, child: const Text('Add Post')),
        ],
      ),
    );
  }


  // UI for displaying the list of posts in real-time.
  Widget _buildPostsList() {
    return Expanded(
      child: StreamBuilder<QuerySnapshot>(
        stream: _postsCollection.orderBy('timestamp', descending: true).snapshots(),
        builder: (context, snapshot) {
          if (snapshot.hasError) {
            return Center(child: Text('Something went wrong: ${snapshot.error}'));
          }
          if (snapshot.connectionState == ConnectionState.waiting) {
            return const Center(child: CircularProgressIndicator());
          }
          if (snapshot.data!.docs.isEmpty) {
            return const Center(child: Text('No posts yet. Add one!'));
          }
         
          final posts = snapshot.data!.docs.map((doc) => Post.fromFirestore(doc)).toList();


          return ListView.builder(
            itemCount: posts.length,
            itemBuilder: (context, index) {
              final post = posts[index];
              return Card(
                margin: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                child: ListTile(
                  title: Text(post.title, style: const TextStyle(fontWeight: FontWeight.bold)),
                  subtitle: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      const SizedBox(height: 4),
                      Text(post.message),
                      const SizedBox(height: 4),
                      Text(
                        'Posted on ${post.timestamp.toLocal().toString().split('.')[0]}',
                        style: TextStyle(fontSize: 12, color: Colors.grey[600]),
                      ),
                    ],
                  ),
                  trailing: IconButton(
                    icon: const Icon(Icons.delete),
                    onPressed: () => _deletePost(post.id!),
                  ),
                ),
              );
            },
          );
        },
      ),
    );
  }
}
